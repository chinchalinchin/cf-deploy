#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SCRIPT_NAME="pipeline-stack"
SCRIPT_DES=$''
PROJECT_DIR=$SCRIPT_DIR/../../..
source $PROJECT_DIR/.env

# Example Usage:
# >$     devops-stack --environment <Dev | Prod | Test | Staging> \
#                   --action <create | update | delete> 

#   NOTE: ``--action`` defaults to `create` if not supplied

function log(){
    echo -e "\e[92m$(date +"%r")\e[0m: \e[4;32m$SCRIPT_NAME\e[0m : >> $1"
}

function help(){
    echo -e "\n\e[4m$SCRIPT_NAME\e[0m\n\n\t$SCRIPT_DES" 
}

while [[ $# -gt 0 ]]; do
       key="$1"
       case $key in
                --action)
                    ACTION="$2"
                    shift
                    shift 
                    ;;
                --help)
                    help
                    exit 0
                    ;;
                --environment)
                    ENVIRONMENT="$2"
                    shift
                    shift
                    ;;
                *)
                    log "Input not understood. See \e[3m--help\e[0m for information on using this command."
                    exit 1
                    ;;
       esac
done

if [ -z "$ACTION" ]
then
    ACTION="create"
fi

cp $PROJECT_DIR/templates/devops/pipeline.yml ./pipeline.yml

if [ "$ACTION" == "create" ]
then
    aws cloudformation create-stack \
        --stack-name "${APPLICATION^}-${PIPELINE_STACK}" \
        --template-body file://pipeline.yml \
        --parameters ParameterKey=applicationName,ParameterValue="$APPLICATION"  \
                     ParameterKey=domainName,ParameterValue="$DOMAIN" \
                     ParameterKey=iamStack,ParameterValue="${APPLICATION^}-$IAM_STACK" \
                     ParameterKey=repoStack,ParameterValue="${APPLICATION^}-$REPO_STACK" \
                     ParameterKey=dnsStack,ParameterValue="${APPLICATION^}-${DNS_STACK}" 

elif [ "$ACTION" == "update" ]
then
    echo "${APPLICATION^}-${DNS_STACK}"
    aws cloudformation update-stack \
        --stack-name "${APPLICATION^}-${PIPELINE_STACK}" \
        --template-body file://pipeline.yml \
        --parameters ParameterKey=applicationName,ParameterValue=$APPLICATION \
                     ParameterKey=domainName,ParameterValue="$DOMAIN" \
                     ParameterKey=iamStack,ParameterValue="${APPLICATION^}-$IAM_STACK" \
                     ParameterKey=repoStack,ParameterValue="${APPLICATION^}-$REPO_STACK" \
                     ParameterKey=dnsStack,ParameterValue="${APPLICATION^}-${DNS_STACK}"

         
elif [ "$ACTION" == "delete" ]
then
    aws cloudformation delete-stack \
        --stack-name "${APPLICATION^}-${PIPELINE_STACK}"
else
    log "Action not understood"
fi

rm ./pipeline.yml