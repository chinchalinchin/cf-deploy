#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SCRIPT_NAME="vpc-stack"
SCRIPT_DES=$''
PROJECT_DIR=$SCRIPT_DIR/../../..
source $PROJECT_DIR/.env

# Example Usage:
# >$     vpc-stack --environment <Dev | Prod | Test | Staging> \
#                   --action <create | update | delete>

#   NOTE: ``--action`` defaults to `create` if not supplied
#   NOTE: This script will generate an SSH key with the name given by the environment
#           variable $SSH_KEY_NAME in your user's *~/.ssh/* directory. The private key
#           in this directory can be used to initiate an SSH tunnel with the RDS instance
#           through the NAT Instance bastion host.

function log(){
    echo -e "\e[92m$(date +"%r")\e[0m: \e[4;32m$SCRIPT_NAME\e[0m : >> $1"
}

function help(){
    echo -e "\n\e[4m$SCRIPT_NAME\e[0m\n\n\t$SCRIPT_DES" 
}

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --action)
            ACTION="$2"
            shift
            shift 
            ;;
        --help)
            help
            exit 0
            ;;
        --environment)
            ENVIRONMENT="$2"
            shift
            shift
            ;;
        *)
            log "Input not understood. See \e[3m--help\e[0m for information on using this command."
            exit 1
            ;;
    esac
done

if [ -z "$ACTION" ]
then
    ACTION="create"
fi

cp $PROJECT_DIR/templates/app/vpc.yml ./vpc.yml

if [ "$ACTION" == "create" ]
then
    ssh-keygen \
        -t rsa \
        -C "${APPLICATION}_${SSH_KEY_NAME}_${ENVIRONMENT}" \
        -f ~/.ssh/"${APPLICATION}_${SSH_KEY_NAME}_${ENVIRONMENT}"

    aws ec2 import-key-pair \
        --key-name "${APPLICATION}_${SSH_KEY_NAME}_${ENVIRONMENT}"  \
        --public-key-material fileb://~/.ssh/"${APPLICATION}_${SSH_KEY_NAME}_${ENVIRONMENT}.pub"

    aws cloudformation create-stack \
        --stack-name "${APPLICATION^}-${VPC_STACK}-${ENVIRONMENT}" \
        --template-body file://vpc.yml \
        --parameters ParameterKey=environmentName,ParameterValue=$ENVIRONMENT \
                     ParameterKey=dbKeyName,ParameterValue="${APPLICATION}_${SSH_KEY_NAME}_${ENVIRONMENT}" \
                     ParameterKey=applicationName,ParameterValue=$APPLICATION

elif [ "$ACTION" == "update" ]
then
    aws cloudformation update-stack \
        --stack-name "${APPLICATION^}-${VPC_STACK}-${ENVIRONMENT}" \
        --template-body file://vpc.yml \
        --parameters ParameterKey=environmentName,ParameterValue=$ENVIRONMENT \
                     ParameterKey=dbKeyName,ParameterValue="${APPLICATION}_${SSH_KEY_NAME}_${ENVIRONMENT}" \
                     ParameterKey=applicationName,ParameterValue=$APPLICATION

elif [ "$ACTION" == "delete" ]
then
    aws cloudformation delete-stack \
        --stack-name "${VPC_STACK}-${ENVIRONMENT}"
    
    aws ec2 delete-key-pair \
        --key-name "${APPLICATION}_${SSH_KEY_NAME}_${ENVIRONMENT}"

else
    log "Action not understood"
fi

rm ./vpc.yml