AWSTemplateFormatVersion: '2010-09-09'

Description: "A stack for provisioning the CodeCommit repositories where the application source code will be housed and S3 buckets that will hold application artifacts. Alternatively, if GitHub is being used as the version control, this stack can be configured to create a CodeStar connection instead of CodeCommit repositories; Note: if using this configuration, the stack will stall until a user logs into the CodeStar console and manually completes the Github OAuth authorization."

Parameters:
  applicationName:
    Type: String
    Default: innolab
    Description: Namespace of the application resources
  github:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Flag to stop the provisioning of CodeCommit resources and provision a CodeStar connection to Github instead.

Conditions:
  GitHubSource: !Equals
    - !Ref github
    - true

  CodeCommitSource: !Equals
    - !Ref github
    - false

Resources:
  GitHubConnection:
    Type: AWS::CodeStarConnections::Connection
    Condition: GitHubSource
    Properties:
      ConnectionName: !Sub ${applicationName}-github-connection
      ProviderType: GitHub

  EnvironmentBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub "${applicationName}-env-files"
  
  TaskBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256 
      BucketName: !Sub "${applicationName}-cluster-task-definitions"

  DataBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256 
      BucketName: !Sub "${applicationName}-data-files"

  ReportBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256 
      BucketName: !Sub "${applicationName}-reports"

  MasterRepo:
    Type: AWS::CodeCommit::Repository
    Condition: CodeCommitSource
    Properties:
      RepositoryName: !Sub "${applicationName}-master"
      RepositoryDescription: "A repository for documentation and master files"

  MigrationRepo:
    Type: AWS::CodeCommit::Repository
    Condition: CodeCommitSource
    Properties:
      RepositoryName: !Sub "${applicationName}-migration"
      RepositoryDescription: "A repository for data migration files"

  DockerRepo:
    Type: AWS::CodeCommit::Repository
    Condition: CodeCommitSource
    Properties:
      RepositoryName: !Sub "${applicationName}-docker-images"
      RepositoryDescription: "A repository for Dockerfiles"

  CloudFormationRepo:
    Type: AWS::CodeCommit::Repository
    Condition: CodeCommitSource
    Properties:
      RepositoryName: !Sub "${applicationName}-cloudformation"
      RepositoryDescription: "A repository for CloudFormation templates"

  FrontendRepo:
    Type: AWS::CodeCommit::Repository
    Condition: CodeCommitSource
    Properties:
      RepositoryName: !Sub "${applicationName}-frontend"
      RepositoryDescription: "A repository for the frontend application"

  LambdaRepo:
    Type: AWS::CodeCommit::Repository
    Condition: CodeCommitSource
    Properties:
      RepositoryName: !Sub "${applicationName}-lambdas"
      RepositoryDescription: "A repository for Lambda functions"
      
  BackendRepo:
    Type: AWS::CodeCommit::Repository
    Condition: CodeCommitSource
    Properties:
      RepositoryName: !Sub "${applicationName}-backend"
      RepositoryDescription: "A repository for the backend application"
      
  TestingRepo:
    Type: AWS::CodeCommit::Repository
    Condition: CodeCommitSource
    Properties:
      RepositoryName: !Sub "${applicationName}-test-harness"
      RepositoryDescription: "A repository for the BDD testing harness"
      RepositoryDescription: "A repository for testing harness"

  PostgresECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold Postgres image
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-postgres"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ecr-code-build-policy
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName
  
  NodeECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold Node image
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-node"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ecr-code-build-policy
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

  OpenJDKECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold OpenJDK image
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-openjdk"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ecr-code-build-policy
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

  OWASPECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold OWASP ZAP image
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-owasp"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ecr-code-build-policy
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

  PythonECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold Python image
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-python"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ecr-code-build-policy
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

  NginxECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold nginx image
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-nginx"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ecr-code-build-policy
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

  FrontendECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold frontend application image
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-frontend"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ecr-code-build-policy
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

  BackendECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold backend application image
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-backend"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ecr-code-build-policy
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

  LambdaAlphaECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Lambda function
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-alpha"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

  LambdaBetaECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Lambda beta function
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-beta"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaBetaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName
  
  LambdaGammaECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Lambda gamma function
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-gamma"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaGammaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

  LambdaDeltaECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Lambda Delta function
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-delta"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaDeltaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

  LambdaEpsilonECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Lambda Epsilon function
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-epsilon"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaEpsilonPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

  LambdaEtaECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Lambda Epsilon function
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-eta"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaEpsilonPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName
  
  LambdaZetaECR:
    Type: AWS::ECR::Repository
    Description: ECR to hold image of Lambda Epsilon function
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-zeta"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaEpsilonPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Application
          Value: !Ref applicationName

Outputs:
  EnvironmentBucketArn:
    Value: !GetAtt EnvironmentBucket.Arn
    Description: Bucket arn for Environment bucket
    Export:
      Name: !Sub ${AWS::StackName}-EnvironmentBucketARN
  EnvironmentBucket:
    Value: !Ref EnvironmentBucket
    Description: Bucket name of the Environment bucket
    Export:
      Name: !Sub ${AWS::StackName}-EnvironmentBucket

  TaskBucketArn:
    Value: !GetAtt TaskBucket.Arn
    Description: Bucket arn for Task bucket
    Export:
      Name: !Sub ${AWS::StackName}-TaskBucketARN
  TaskBucket:
    Value: !Ref TaskBucket
    Description: Bucket name of Task bucket
    Export:
      Name: !Sub ${AWS::StackName}-TaskBucket
  

  DockerRepository:
    Value: !GetAtt DockerRepo.Name
    Description: Repository name for Dockerfile repository
    Export:
      Name: !Sub ${AWS::StackName}-DockerRepository
  DockerRepositoryARN:
    Value: !GetAtt DockerRepo.Arn
    Description: Repository ARN for Dockerfile repository
    Export:
      Name: !Sub ${AWS::StackName}-DockerRepositoryARN
  DockerRepositorySSHClone:
    Value: !GetAtt DockerRepo.CloneUrlSsh
    Description: SSH clone URL for Dockerfile repository
    Export:
      Name: !Sub ${AWS::StackName}-DockerCloneSSH

  MigrationRepository:
    Value: !GetAtt MigrationRepo.Name
    Description: Repository name for the database migration repository
    Export:
      Name: !Sub ${AWS::StackName}-MigrationRepository
  MigrationRepositoryARN:
    Value: !GetAtt MigrationRepo.Arn
    Description: Repository ARN for the database migration repository
    Export:
      Name: !Sub ${AWS::StackName}-MigrationRepositoryARN
  MigrationRepositorySSHClone:
    Value: !GetAtt DockerRepo.CloneUrlSsh
    Description: SSH clone URL for the database migration repository
    Export:
      Name: !Sub ${AWS::StackName}-MigrationCloneSSH

  CloudFormationRepository:
    Value: !GetAtt CloudFormationRepo.Name
    Description: Repository name for CloudFormation template repository
    Export:
      Name: !Sub ${AWS::StackName}-CloudFormationRepository
  CloudFormationRepositorySSHClone:
    Value: !GetAtt CloudFormationRepo.CloneUrlSsh
    Description: SSH clone URL for CloudFormation template repository
    Export:
      Name: !Sub ${AWS::StackName}-CloudFormationCloneSSH
  CloudFormationRepositoryARN:
    Value: !GetAtt CloudFormationRepo.Arn
    Description: Repository ARN for CloudFormation template repository
    Export:
      Name: !Sub ${AWS::StackName}-CloudFormationRepositoryARN

  FrontendRepository:
    Value: !GetAtt FrontendRepo.Name
    Description: Repository name for the Frontend React app repository
    Export:
      Name: !Sub ${AWS::StackName}-FrontendRepository
  FrontendRepositoryARN:
    Value: !GetAtt FrontendRepo.Arn
    Description: Repository ARN for the frontend application repository
    Export:
      Name: !Sub ${AWS::StackName}-FrontendRepositoryARN
  FrontendRepositorySSHClone:
    Value: !GetAtt FrontendRepo.CloneUrlSsh
    Description: Repository name for the frontend application repository
    Export:
      Name: !Sub ${AWS::StackName}-FrontendCloneSSH

  BackendRepository:
    Value: !GetAtt BackendRepo.Name
    Description: Repository name for backend application repository
    Export:
      Name: !Sub ${AWS::StackName}-BackendRepository
  BackendRepositoryARN:
    Value: !GetAtt BackendRepo.Arn
    Description: Repository name for backend application repository
    Export:
      Name: !Sub ${AWS::StackName}-BackendRepositoryARN
  BackendCloneSSH:
    Value: !GetAtt BackendRepo.CloneUrlSsh
    Description: SSH clone URL for backend application repository
    Export:
      Name: !Sub ${AWS::StackName}-BackendCloneSSH

  LambdaRepository:
    Value: !GetAtt LambdaRepo.Name
    Description: Repository name for Lambda functions repository
    Export:
      Name: !Sub ${AWS::StackName}-LambdaRepository
  LambdaRepositoryARN:
    Value: !GetAtt LambdaRepo.Arn
    Description: Repository name for Lambda functions repository
    Export:
      Name: !Sub ${AWS::StackName}-LambdaRepositoryARN
  LambdaCloneSSH:
    Value: !GetAtt LambdaRepo.CloneUrlSsh
    Description: SSH clone URL for Lambda functions repository
    Export:
      Name: !Sub ${AWS::StackName}-LambdaCloneSSH

  TestingRepository:
    Value: !GetAtt TestingRepo.Name
    Description: Repository name for automated testing repository
    Export:
      Name: !Sub ${AWS::StackName}-TestingRepository
  TestingRepositoryARN:
    Value: !GetAtt TestingRepo.Arn
    Description: Repository name for automated testing repository
    Export:
      Name: !Sub ${AWS::StackName}-TestingRepositoryARN
  TestingCloneSSH:
    Value: !GetAtt TestingRepo.CloneUrlSsh
    Description: Repository name for automated testing repository
    Export:
      Name: !Sub ${AWS::StackName}-TestingCloneSSH
  
  MasterRepository:
    Value: !GetAtt MasterRepo.Name
    Description: Repository name for master repository
    Export:
      Name: !Sub ${AWS::StackName}-MasterRepository
  MasterRepositoryArn:
    Value: !GetAtt MasterRepo.Arn
    Description: Repository name for master repository
    Export:
      Name: !Sub ${AWS::StackName}-MasterRepositoryARN
  MasterCloneSSH:
    Value: !GetAtt MasterRepo.CloneUrlSsh
    Description: Repository name for master repository
    Export:
      Name: !Sub ${AWS::StackName}-MasterCloneSSH

  PostgresImageRepository:
    Value: !GetAtt PostgresECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-PostgresImageRepository
  PostgresImageRepositoryName:
    Value: !Ref PostgresECR
    Export:
      Name: !Sub ${AWS::StackName}-PostgresImageRepositoryName

  OpenJDKImageRepository:
    Value: !GetAtt OpenJDKECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-OpenJDKImageRepository
  OpenJDKImageRepositoryName:
    Value: !Ref OpenJDKECR
    Export:
      Name: !Sub ${AWS::StackName}-OpenJDKImageRepositoryName

  BackendImageRepository:
    Value: !GetAtt BackendECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-BackendImageRepository
  BackendImageRepositoryName:
    Value: !Ref BackendECR
    Export:
      Name: !Sub ${AWS::StackName}-BackendImageRepositoryName

  FrontendImageRepository:
    Value: !GetAtt FrontendECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-FrontendImageRepository
  FrontendImageRepositoryName:
    Value: !Ref FrontendECR
    Export:
      Name: !Sub ${AWS::StackName}-FrontendImageRepositoryName
      
  LambdaAlphaImageRepository:
    Value: !GetAtt LambdaAlphaECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaAlphaImageRepository
  LambdaBetaImageRepository:
    Value: !GetAtt LambdaBetaECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaBetaImageRepository
  LambdaGammaImageRepository:
    Value: !GetAtt LambdaGammaECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaGammaImageRepository
  LambdaDeltaImageRepositry:
    Value: !GetAtt LambdaDeltaECR.RepositoryUri
    Export: 
      Name: !Sub ${AWS::StackName}-LambdaDeltaImageRepository
  LambdaEpsilonImageRepository:
    Value: !GetAtt LambdaEpsilonECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaEpsilonImageRepository
  LambdaEtaImageRepositry:
    Value: !GetAtt LambdaEtaECR.RepositoryUri
    Export: 
      Name: !Sub ${AWS::StackName}-LambdaEtaImageRepository
  LambdaZetaImageRepository:
    Value: !GetAtt LambdaZetaECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaZetaImageRepository
