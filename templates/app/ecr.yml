AWSTemplateFormatVersion: "2010-09-09"

Description: "Conditionally provisions ECRs to hold images for Lambda functions and attaches policies to pull and push to these ECRs to the PipelineUser from the InnoLab-UserStack."
Parameters:
  components:
    Type: String
    AllowedValues:
      - one
      - two
      - three
      - four
      - five
    Default: five
  applicationName:
    Type: String
    Default: innolab
  userStack:
    Type: String
    Default: InnoLab-UserStack
  

Conditions:
  CreateOneComponent: !Equals
      - !Ref components
      - one
  CreateTwoComponents: !Equals
      - !Ref components
      - two
  CreateThreeComponents: !Equals
      - !Ref components
      - three
  CreateFourComponents: !Equals
      - !Ref components
      - four
  CreateFiveComponents: !Equals
      - !Ref components
      - five
  
  CreateAlphaComponent: !Or
    - !Condition CreateOneComponent
    - !Condition CreateTwoComponents
    - !Condition CreateThreeComponents
    - !Condition CreateFourComponents
    - !Condition CreateFiveComponents

  CreateBetaComponent: !Or
    - !Condition CreateTwoComponents
    - !Condition CreateThreeComponents
    - !Condition CreateFourComponents
    - !Condition CreateFiveComponents

  CreateGammaComponent: !Or
    - !Condition CreateThreeComponents
    - !Condition CreateFourComponents
    - !Condition CreateFiveComponents

  CreateDeltaComponent: !Or
    - !Condition CreateFourComponents
    - !Condition CreateFiveComponents

  CreateEpsilonComponent: !Condition CreateFiveComponents

Resources:
  LambdaAlphaECR:
    Type: AWS::ECR::Repository
    Condition: CreateAlphaComponent
    Description: ECR to hold image of Lambda function
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-alpha"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LambdaAlphaECR

  LambdaBetaECR:
    Type: AWS::ECR::Repository
    Condition: CreateBetaComponent
    Description: ECR to hold image of Lambda beta function
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-beta"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaBetaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LambdaBetaECR
  
  LambdaGammaECR:
    Type: AWS::ECR::Repository
    Condition: CreateAlphaComponent
    Description: ECR to hold image of Lambda gamma function
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-gamma"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaGammaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LambdaGammaECR

  LambdaDeltaECR:
    Type: AWS::ECR::Repository
    Condition: CreateDeltaComponent
    Description: ECR to hold image of Lambda Delta function
    Properties:
      ImageScanningConfiguration: 
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-delta"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaDeltaPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LambdaDeltaECR

  LambdaEpsilonECR:
    Type: AWS::ECR::Repository
    Condition: CreateEpsilonComponent
    Description: ECR to hold image of Lambda Epsilon function
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryName: !Sub "${applicationName}-lambda-epsilon"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: ECRLambdaEpsilonPolicy
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LambdaEpsilonECR

Outputs:
  LambdaAlphaImageRepository:
    Value: !GetAtt LambdaAlphaECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaAlphaImageRepository
  LambdaBetaImageRepository:
    Value: !GetAtt LambdaBetaECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaBetaImageRepository
  LambdaGammaImageRepository:
    Value: !GetAtt LambdaGammaECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaGammaImageRepository
  LambdaDeltaImageRepositry:
    Value: !GetAtt LambdaDeltaECR.RepositoryUri
    Export: 
      Name: !Sub ${AWS::StackName}-LambdaDeltaImageRepository
  LambdaEpsilonImageRepository:
    Value: !GetAtt LambdaEpsilonECR.RepositoryUri
    Export:
      Name: !Sub ${AWS::StackName}-LambdaEpsilonImageRepository