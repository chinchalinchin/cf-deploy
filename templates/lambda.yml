AWSTemplateFormatVersion: "2010-09-09"

Description: 'Provisions a series of Lambda functions, gives them an execution role for the VPC from applicationName-VPCStack-environmentName and attaches policies to update the function code to the pipeline role from the applicationName-IAMStack. The execution images for the Lambdas are pulled from the repositores in applicationName-RepoStack.'

Parameters:
  environmentName:
    Type: String
    Default: Dev
    Description: Environment into which the stack is deploying
  applicationName:
    Type: String
    Default: innolab
    Description: Namespace of the stack resources
  iamStack:
    Type: String
    Default: Innolab-IAMStack
    Description: Cross-stack reference to applicationName-IAMStack
  repoStack:
    Type: String
    Default: Innolab-RepoStack
    Description: Cross-stack reference to applicationName-RepoStack
  vpcStack:
    Type: String
    Default: Innolab-VPCStack-Dev
    Description: Cross-stack reference to applicationName-VPCStack-environmentName

Mappings:
  BranchMap:
    Dev: 
      branch:  "dev"
      subdomain: "-dev"
    Test: 
      branch: "test"
      subdomain: "-test"
    Staging: 
      branch: "staging"
      subdomain: "-staging"
    Prod: 
      branch: "prod"
      subdomain: ""

Resources:
  LambdaAlpha: 
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${applicationName}-lambda-alpha-${environmentName}
      Code: 
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo: 
              Fn::ImportValue: !Sub ${repoStack}-LambdaAlphaImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role: 
        Fn::ImportValue: !Sub ${iamStack}-LambdaExecutorRoleArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      Timeout: 90

  LambdaBeta: 
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${applicationName}-lambda-beta-${environmentName}
      Code: 
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo: 
              Fn::ImportValue: !Sub ${repoStack}-LambdaBetaImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role: 
        Fn::ImportValue: !Sub ${iamStack}-LambdaExecutorEC2RoleArn
      Timeout: 90

  LambdaGamma:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${applicationName}-lambda-gamma-${environmentName}
      Code: 
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo: 
              Fn::ImportValue: !Sub ${repoStack}-LambdaGammaImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role: 
        Fn::ImportValue: !Sub ${iamStack}-LambdaExecutorRoleArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      Timeout: 90

  LambdaDelta:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${applicationName}-lambda-delta-${environmentName}
      Code: 
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo: 
              Fn::ImportValue: !Sub ${repoStack}-LambdaDeltaImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role: 
        Fn::ImportValue: !Sub ${iamStack}-LambdaExecutorRoleArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds: 
            - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
            - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      Timeout: 90

  LambdaEpsilon:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${applicationName}-lambda-epsilon-${environmentName}
      Code:
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo:
              Fn::ImportValue: !Sub ${repoStack}-LambdaEpsilonImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role:
        Fn::ImportValue: !Sub ${iamStack}-LambdaExecutorRoleArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      Timeout: 180

  LambdaEta:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${applicationName}-lambda-eta-${environmentName}
      Code:
        ImageUri: !Sub
          - "${ecrRepo}:${environment}"
          - ecrRepo:
              Fn::ImportValue: !Sub ${repoStack}-LambdaEtaImageRepository
            environment: !Ref environmentName
      PackageType: Image
      Role:
        Fn::ImportValue: !Sub ${iamStack}-LambdaExecutorRoleArn
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
          - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      Timeout: 180
  
  LambdaZeta: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${applicationName}-lambda-zeta-${environmentName}
      Code:
        ImageUri: !Sub
          - "${ecrUri}:${tag}"
          - ecrUri:
              Fn::ImportValue: !Sub ${repoStack}-LambdaZetaImageRepository
            tag: !Ref environmentName
      PackageType: Image
      Role:
        Fn::ImportValue: !Sub ${iamStack}-LambdaExecutorRoleArn
      Timeout: 180

  StartStopRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "StopEc2Rule"
      ScheduleExpression: "cron(0 13,21 * * 1-5)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt LambdaBeta.Arn
          Id: !Sub "${applicationName}-${environmentName}-stop-ec2-rule"

  PermissionForStartEventToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: !Sub ${applicationName}-lambda-beta-${environmentName}
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt StartEc2Rule.Arn

  PermissionForStopEventToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: !Sub ${applicationName}-lambda-beta-${environmentName}
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt StopEc2Rule.Arn
      
Outputs:
  LambdaAlphaArn:
    Value: !GetAtt LambdaAlpha.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaAlphaARN
  LambdaBetaArn:
    Value: !GetAtt LambdaBeta.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaBetaARN
  LambdaGammaArn:
    Value: !GetAtt LambdaGamma.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaGammaARN
  LambdaDeltaArn:
    Value: !GetAtt LambdaDelta.Arn
    Export: 
      Name: !Sub ${AWS::StackName}-LambdaDeltaARN
  LambdaEpsilonArn:
    Value: !GetAtt LambdaEpsilon.Arn
    Export: 
      Name: !Sub ${AWS::StackName}-LambdaEpsilonARN
  LambdaEtArn:
    Value: !GetAtt LambdaEta.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaEtaARN
  LambdaZetaArn:
    Value: !GetAtt LambdaZeta.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaZetaARN

  # GatewayEndpoint:
  #   Value: !Sub https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/${environmentName}
  #   Export:
  #     Name: !Sub ${AWS::StackName}-GatewayEndpoint
  # RestAPIID: 
  #   Value: !Ref RestAPI
  #   Export:
  #     Name: !Sub ${AWS::StackName}-RestAPIID


  ## EXAMPLE CLOUDWATCH INTEGRATION
  ### CODECOMMIT INTEGRATION
  # EventRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     EventPattern:
  #       source:
  #         - aws.codecommit
  #       detail-type:
  #         - 'CodeCommit Repository State Change'
  #       resources:
  #         - Fn::ImportValue: !Sub "${repoStack}-BackendRepositoryARN"
  #         - Fn::ImportValue: !Sub "${repoStack}-FrontendRepositoryARN"
  #         - Fn::ImportValue: !Sub "${repoStack}-LambdaRepositoryARN"
  #       detail:
  #         event:
  #           - referenceCreated
  #           - referenceUpdated
  #         referenceType:
  #           - branch
  #         referenceName:
  #           - !Ref environmentName
  #     Targets:
  #       - Arn: !GetAtt LambdaZeta.Arn
  #         Id: !Sub "${applicationName}-lambda-zeta-cloudwatch-${environmentName}"
  #       - Arn: !GetAtt LambdaGamma.Arn
  #         Id: !Sub "${applicationName}-lambda-gamma-cloudwatch-${environmentName}"

  # LambdaZetaCloudWatchEnvironmentInvoke: 
  #   Type: AWS::Lambda::Permission
  #   Properties: 
  #     FunctionName: !Sub ${applicationName}-lambda-zeta-${environmentName}
  #     Action: lambda:InvokeFunction
  #     Principal: events.amazonaws.com
  #     SourceArn: !GetAtt EnvironmentEventRule.Arn
  #   DependsOn:
  #     - EnvironmentEventRule
  
  # LambdaGammaCloudWatchEnvironmentInvoke: 
  #   Type: AWS::Lambda::Permission
  #   Properties: 
  #     FunctionName: !Sub ${applicationName}-lambda-gamma-${environmentName}
  #     Action: lambda:InvokeFunction
  #     Principal: events.amazonaws.com
  #     SourceArn: !GetAtt EnvironmentEventRule.Arn
  #   DependsOn:
  #     - EnvironmentEventRule

  ## API GATEWAY INTEGRATION
  # RestAPI:
  #   Type: AWS::ApiGateway::RestApi
  #   Properties:
  #     Name: !Sub ${applicationName}-${environmentName}-rest-api

  # CloudWatch:
  #   Type: AWS::ApiGateway::Account
  #   Properties:
  #     CloudWatchRoleArn: 
  #       Fn::ImportValue: !Sub ${iamStack}-LoggerArn
  
  # CloudWatchLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties: 
  #     LogGroupName: !Sub ${AWS::StackName}-LogGroup
  #     RetentionInDays: 30

  # RestAPIDeployment:
  #   Type: AWS::ApiGateway::Deployment
  #   Properties:
  #     RestApiId: !Ref RestAPI
  #     Description: !Sub "${applicationName}'s RestAPI ${environmentName} deployment"
  #     StageName: !Ref environmentName
  #     StageDescription:
  #       AccessLogSetting:
  #         DestinationArn: !GetAtt CloudWatchLogGroup.Arn
  #       LoggingLevel: INFO
  #       MetricsEnabled: True
  #       MethodSettings:
  #         - ResourcePath: "/*"
  #           HttpMethod: "*"
  #           LoggingLevel: INFO
  #           MetricsEnabled: True
  #   DependsOn:
  #     - CloudWatch
  #     - CloudWatchLogGroup

  ## NOTE: Add these two lines to the AWS::ApiGateway::Method properties to attach an authorizer
  ##        to a Gateway endpoint
  #  Properties:
  #     AuthorizationType: COGNITO_USER_POOL
  #     AuthorizerId: !Ref ApiAuthorizer
  # ApiGatewayAuthorizer:
  #   Type: AWS::ApiGateway::Authorizer
  #   Properties:
  #     RestApiId: !Ref RestAPI
  #     Name: !Sub ${AWS::StackName}-Authorizer
  #     Type: COGNITO_USER_POOLS
  #     IdentitySource: method.request.header.authorization
  #     ProviderARNs:
  #       - Fn::ImportValue: !Sub ${cognitoStack}-UserPoolArn

  # InnoLabRootResource: 
  #   Type: 'AWS::ApiGateway::Resource'
  #   Properties: 
  #     RestApiId: !Ref RestAPI
  #     ParentId: !GetAtt RestAPI.RootResourceId
  #     PathPart: innolab
  #   DependsOn:
  #     - RestAPI

  # InnoLabLambdaResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     RestApiId: !Ref RestAPI
  #     ParentId: !Ref InnoLabRootResource
  #     PathPart: lambdas
  #   DependsOn:
  #     - InnoLabRootResource

  # ## DNS CONFIGURATION
  # RestAPIDomainName:
  #   Type: 'AWS::ApiGateway::DomainName'
  #   Properties:
  #     CertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${certificateId}"
  #     DomainName: !Sub 
  #       - "apigateway${subdomainEnv}.${domain}"
  #       - subdomainEnv: 
  #           Fn::FindInMap:
  #             - BranchMap
  #             - !Ref environmentName
  #             - subdomain
  #         domain: !Ref domainName
  #     EndpointConfiguration:
  #       Types:
  #         - EDGE

  # RestAPIBasePathMapping:
  #   Type: 'AWS::ApiGateway::BasePathMapping'
  #   Properties:
  #     DomainName: !Ref RestAPIDomainName
  #     RestApiId: !Ref RestAPI
  #     Stage: !Ref environmentName
  #   DependsOn: RestAPIDeployment

  # RestAPIRoute53RecordSetGroup:
  #   Type: AWS::Route53::RecordSetGroup
  #   Properties:
  #     HostedZoneId: !Ref hostedZoneId
  #     RecordSets:
  #       - Name: !Sub 
  #           - "apigateway${subdomainEnv}.${domain}"
  #           - subdomainEnv: 
  #               Fn::FindInMap:
  #                 - BranchMap
  #                 - !Ref environmentName
  #                 - subdomain
  #             domain: !Ref domainName
  #         Type: A
  #         AliasTarget:
  #           HostedZoneId: !GetAtt RestAPIDomainName.DistributionHostedZoneId
  #           DNSName: !GetAtt RestAPIDomainName.DistributionDomainName
  #   DependsOn:
  #     - RestAPIDomainName

  ## EXAMPLE PATH INTEGRATIONS
  ### PATH INTEGRATION
  #### RESOURCE
  # InnoLabRootResource: 
  #   Type: 'AWS::ApiGateway::Resource'
  #   Properties: 
  #     RestApiId: !Ref RestAPI
  #     ParentId: !GetAtt RestAPI.RootResourceId
  #     PathPart: innolab
  #   DependsOn:
  #     - RestAPI
  #### RESOURCE METHOD
  # PathResourceMethod:
  #   Type: 'AWS::ApiGateway::Method'
  #   Properties:
  #     RestApiId: !Ref RestAPI
  #     ResourceId: !Ref PathResource
  #     HttpMethod: ANY
  #     AuthorizationType: COGNITO_USER_POOLS
  #     AuthorizerId: !Ref ApiGatewayAuthorizer
  #     Integration:
  #       Type: AWS_PROXY
  #       # INTEGRATION HTTP METHOD MUST BE POST
  #        # NOTE: API Gateway transforms all incoming requests into POSTS
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAlpha.Arn}/invocations"
  #   DependsOn:
  #     - PathResource
  #### CORS RESOURCE METHOD
  # PathResourceCORS:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     AuthorizationType: NONE
  #     RestApiId: !Ref RestAPI
  #     ResourceId: !Ref PathResource
  #     HttpMethod: OPTIONS
  #     Integration:
  #       IntegrationResponses:
  #       - StatusCode: 200
  #         ResponseParameters:
  #           method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #           method.response.header.Access-Control-Allow-Methods: "'*'"
  #           method.response.header.Access-Control-Allow-Origin: "'*'"
  #         ResponseTemplates:
  #           application/json: ''
  #       PassthroughBehavior: WHEN_NO_MATCH
  #       RequestTemplates:
  #         application/json: '{"statusCode": 200}'
  #       Type: MOCK
  #     MethodResponses:
  #     - StatusCode: 200
  #       ResponseModels:
  #         application/json: 'Empty'
  #       ResponseParameters:
  #           method.response.header.Access-Control-Allow-Headers: false
  #           method.response.header.Access-Control-Allow-Methods: false
  #           method.response.header.Access-Control-Allow-Origin: false
  #   DependsOn: 
  #     - PathResource
  # 
  ### PATH PARAMETER INTEGRATION
  #### RESOURCE
  # PathParamResource:
  #   Type: 'AWS::ApiGateway::Resource'
  #   Properties:
  #     RestApiId: !Ref RestAPI
  #     ParentId: !Ref PathResource
  #     PathPart: "{param}"
  #   DependsOn:
  #     - RestAPI
  #     - PathResource
  #### RESOURCE METHOD
  # PathParamResourceMethod:
  #   Type: 'AWS::ApiGateway::Method'
  #   Properties:
  #     RestApiId: !Ref RestAPI
  #     ResourceId: !Ref PathParamResource
  #     HttpMethod: ANY
  #     RequestParameters:
  #       "method.request.path.param": true
  #     AuthorizationType: COGNITO_USER_POOLS
  #     AuthorizerId: !Ref ApiGatewayAuthorizer
  #     Integration:
  #       Type: AWS_PROXY
  #       # INTEGRATION HTTP METHOD MUST BE POST
  #       #   NOTE: API Gateway transforms all incoming requests into POSTS
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBeta.Arn}/invocations"
  #   DependsOn:
  #     - PathResource
  #     - PathParamResource
  #### CORS RESOURCE METHOD
  # PathParamResourceCORS:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     AuthorizationType: NONE
  #     RestApiId: !Ref RestAPI
  #     ResourceId: !Ref PathParamResource
  #     HttpMethod: OPTIONS
  #     Integration:
  #       IntegrationResponses:
  #       - StatusCode: 200
  #         ResponseParameters:
  #           method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #           # method.response.header.Access-Control-Allow-Methods: "'*'"
  #           method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
  #           method.response.header.Access-Control-Allow-Origin: "'*'"
  #         ResponseTemplates:
  #           application/json: ''
  #       PassthroughBehavior: WHEN_NO_MATCH
  #       RequestTemplates:
  #         application/json: '{"statusCode": 200}'
  #       Type: MOCK
  #     MethodResponses:
  #     - StatusCode: 200
  #       ResponseModels:
  #         application/json: 'Empty'
  #       ResponseParameters:
  #           method.response.header.Access-Control-Allow-Headers: false
  #           method.response.header.Access-Control-Allow-Methods: false
  #           method.response.header.Access-Control-Allow-Origin: false
  #   DependsOn:
  #     - PathParamResource
  #### API GATEWAY INVOCATION PERMISSION 
  # LambdaAlphaApiGatewayInvoke:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !GetAtt LambdaAlpha.Arn
  #     Principal: apigateway.amazonaws.com
  #     SourceArn: 
  #       !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/${environmentName}/*
  #   DependsOn:
  #     - RestAPIDeployment