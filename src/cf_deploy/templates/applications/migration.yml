
AWSTemplateFormatVersion: "2010-09-09"

Description: Contains the necessary resources for initiating a data migration between a source database (oracle | postgres) and a target database (oracle | postgres). An EC2 client and a DMS replication instance will be deployed into the applicationName-VPCStack-environmentName to facilitate the migration. 

Parameters:
    applicationName:
        Type: String
        Default: innolab
        Description: Name of the application resources being deployed.
    environmentName:
        Type: String
        Default: Dev
        Description: Environment into which resources are being deplyoed
    clientKeyName:  
        Type: String
        Default: innolab_migration_client
        Description: SSH Key for EC2 Migration client. Must exist in EC2 key ring.
    hostedZoneId:
        Type: String
        Description: Physical ID of the Hosted Zone where the domain is served
    domainName: 
        Type: String
        Description: Domain where resources are hosted
        Default: makpar-innovation.net
    dbSourceUsername: 
        Type: String
        NoEcho: true
    dbSourcePassword:
        Type: String
        NoEcho: true
    dbSourceEngine:
        Type: String
        AllowedValues:
            - postgres
            - oracle
    dbTargetUsername:
        Type: String
        NoEcho: true
    dbTargetPassword:
        Type: String
        NoEcho: true
    dbTargetEngine:
        Type: String
        AllowedValues:
            - postgres
            - oracle
    targetStack:
        Type: String
    sourceStack:
        Type: String
    vpcStack:
        Type: String
        Default: Innolab-VPCStack-Dev
    iamStack:
        Type: String
        Default: Innolab-IAMStack

Mappings:
  ConfigMap:
    postgres: 
      port: 5432
      database: postgres
    oracle: 
      port: 1521
      database: ORCL

Resources:
    SourceDMSEndpoint:
        Type: "AWS::DMS::Endpoint"
        Properties:
            EndpointIdentifier: !Sub "${applicationName}-${environmentName}-source-endpoint"
            EndpointType: source
            EngineName: !Ref dbSourceEngine
            Username: !Ref dbSourceUsername
            Password: !Ref dbSourcePassword
            ServerName: 
                Fn::ImportValue: !Sub "${sourceStack}-RDSEndpoint"
            Port: 
                Fn::FindInMap:
                    - ConfigMap
                    - !Ref dbSourceEngine
                    - port
            DatabaseName:
                Fn::FindInMap:
                    - ConfigMap
                    - !Ref dbSourceEngine
                    - database
            SslMode: "none"

    TargetDMSEndpoint:
        Type: "AWS::DMS::Endpoint"
        Properties:
            EndpointIdentifier: !Sub "${applicationName}-${environmentName}-target-endpoint"
            EndpointType: target
            EngineName: !Ref dbTargetEngine
            Username: !Ref dbTargetUsername
            Password: !Ref dbTargetPassword
            ServerName: 
                Fn::ImportValue: !Sub "${targetStack}-RDSEndpoint"
            Port:
                Fn::FindInMap:
                    - ConfigMap
                    - !Ref dbTargetEngine
                    - port
            DatabaseName: 
                Fn::FindInMap:
                    - ConfigMap
                    - !Ref dbTargetEngine
                    - database
            SslMode: "none"

    ReplicationSubnetGroup: 
        Type: "AWS::DMS::ReplicationSubnetGroup"
        Properties: 
            ReplicationSubnetGroupDescription: !Sub "Replication group for the ${applicationName} ${environmentName} environment"
            ReplicationSubnetGroupIdentifier: !Sub "${applicationName}-${environmentName}-rep-subnet-group"
            SubnetIds: 
                - Fn::ImportValue: !Sub "${vpcStack}-PrivateSubnetA"
                - Fn::ImportValue: !Sub "${vpcStack}-PrivateSubnetB"
            Tags: 
                -   Key: Application
                    Value: !Ref applicationName
                -   Key: Environment
                    Value: !Ref environmentName
            
    DMSReplicationInstance:
        Type: "AWS::DMS::ReplicationInstance"
        Properties:
            ReplicationInstanceIdentifier: !Sub "${applicationName}-${environmentName}-replication-instance"
            ReplicationInstanceClass: "dms.t3.medium"
            AllocatedStorage: 5
            VpcSecurityGroupIds:
              - Fn::ImportValue: !Sub "${vpcStack}-DatabaseSecurityGroup"
            AvailabilityZone: !Sub "${AWS::Region}b"
            ReplicationSubnetGroupIdentifier: !Ref ReplicationSubnetGroup
            MultiAZ: false
            EngineVersion: "3.4.6"
            AutoMinorVersionUpgrade: true
            PubliclyAccessible: false

    ReplicationVPCSecurityGroupIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Ingress from all VPC IPs
            GroupId: 
                Fn::ImportValue: !Sub "${vpcStack}-DatabaseSecurityGroup"
            IpProtocol: tcp
            CidrIp:
                Fn::ImportValue: !Sub "${vpcStack}-CidrBlock"
            FromPort: '0'
            ToPort: '65535'

    MigrationClient:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: "ami-0728c171aa8e41159"
            InstanceType: "t2.large"
            KeyName: !Ref clientKeyName
            NetworkInterfaces:
                -   DeviceIndex: '0'
                    SubnetId: 
                        Fn::ImportValue: !Sub "${vpcStack}-PublicSubnetA"
                    AssociatePublicIpAddress: true
                    GroupSet: [Fn::ImportValue: !Sub "${vpcStack}-NATSecurityGroup", Fn::ImportValue: !Sub "${vpcStack}-DatabaseSecurityGroup"]  
            IamInstanceProfile: 
                Fn::ImportValue: !Sub "${iamStack}-MigrationProfile"
            Tags: 
                -   Key: Name
                    Value: !Sub ${applicationName}-${environmentName}-migration
                -   Key: "Environment"
                    Value: !Ref environmentName
                -   Key: "Application"
                    Value: !Ref applicationName
                -   Key: "AutoStop"
                    Value: True
                -   Key: "AutoStart"
                    Value: True
            UserData: 
                Fn::Base64: |
                    #!/bin/bash
                    yum install xdg-utils -y 
                    cd /home/
                    wget https://s3.amazonaws.com/publicsctdownload/Fedora/aws-schema-conversion-tool-1.0.latest.zip
                    unzip aws-schema-conversion-tool-1.0.latest.zip
                    rpm -i aws-schema-conversion-tool-1.0.660-1.x86_64.rpm
                    mkdir jars
                    cd jars
                    wget https://jdbc.postgresql.org/download/postgresql-42.2.19.jar
                    wget https://repo1.maven.org/maven2/com/oracle/database/jdbc/ojdbc11/21.5.0.0/ojdbc11-21.5.0.0.jar

    MigrationElasticIP:
        Type: AWS::EC2::EIP
        Properties:
            InstanceId: !Ref MigrationClient

    MigrationRoute53RecordSetGroup:
        Type: AWS::Route53::RecordSetGroup
        Properties:
            HostedZoneId: !Ref hostedZoneId
            RecordSets:
                -   Name: !Sub "${applicationName}-migration.${domainName}"
                    Type: A
                    ResourceRecords: 
                        - !Ref MigrationElasticIP
                    TTL: 900

    # DMSReplicationTask:
    #     Type: "AWS::DMS::ReplicationTask"
    #     Properties:
    #         ReplicationTaskIdentifier: "${applicationName}-${environmentName}-migration-task"
    #         SourceEndpointArn: !Ref SourceDMSEndpoint
    #         TargetEndpointArn: !Ref TargetDMSEndpoint
    #         ReplicationInstanceArn: !Ref DMSReplicationInstance
    #         MigrationType: "full-load"
