
AWSTemplateFormatVersion: "2010-09-09"

Description: 'Description goes here.'

Parameters:
  ## CROSS STACK REFERENCES
  iamStack:
    Type: String
    Default: Innolab-IAMStack
    Description: Name of the IAM Cross Stack reference
  repoStack:
    Type: String
    Default: Innolab-RepoStack
    Description: Name of the Repo Cross Stack reference
  vpcStack:
    Type: String
    Default: Innolab-VPCStack-Dev
    Description: Name of the VPC Cross Stack reference
  clusterStack:
    Type: String
    Default: Innolab-ClusterStack-Dev
  ## APPLICATION CONFIGURATION
  applicationName:
    Type: String
    Default: innolab
    Description: The name of the application being deployed.
  environmentName:
    Type: String
    Default: Dev
    Description: The environment into which the application is being deployed.
  ## SERVICE CONFIGURATION
  domain:
    Type: String
    Default: makpar-innovation.net
    Description: Domain for the application cluster
  port:
    Type: Number
    Default: 8000
    Description: Port mapping for backend service
  tag:
    Type: String
    Default: Dev-v0.0.0
    Description: Image tag for the backend service ECR

Mappings:
  BranchMap:
    Dev: 
      branch:  "dev"
      subdomain: "-dev"
    Test: 
      branch: "test"
      subdomain: "-test"
    Staging: 
      branch: "staging"
      subdomain: "-staging"
    Prod: 
      branch: "prod"
      subdomain: ""

# NOTE: replace every instance of <service> with your service name.
Resources:
  PrivateServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${applicationName}/${environmentName}/<service>/"

  AutoScalingPrivateServiceTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 3
      ResourceId: !Join ['/', [service, Fn::ImportValue: !Sub "${clusterStack}-Cluster", !GetAtt PrivateService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN:
        Fn::ImportValue: !Sub "${iamStack}-ECSScalingRoleArn"
  
  AutoScalingPrivateServicePolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "service/${applicationName}-${environmentName}-cluster/${applicationName}-${environmentName}-<service>"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingServiceTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 50

  PrivateServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-<service>-target"
      Port: !Ref port
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  PrivateServiceTargetGroupAlt:
    # NOTE: Only needed if the application is being deployed through blue-green deployments.
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-<service>-target-2"
      Port: !Ref port
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  PrivateLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref PrivateServiceTargetGroup
          Type: 'forward'
      LoadBalancerArn:
        Fn::ImportValue: !Sub ${clusterStack}-PrivateLoadBalancerARN
      Port: !Ref port
      Protocol: HTTP

  PrivateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: BackendLogGroup
    Properties:
      Family: !Sub "${applicationName}-${environmentName}-<service>-task-definition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub "${iamStack}-ECSTaskExecutionRoleArn"
      ContainerDefinitions:
        - Name: !Sub ${applicationName}-${environmentName}-<service>
          Image: <image:tag> # Update this with the image and tag
          PortMappings:
            - ContainerPort: !Ref port
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref PrivateLogGroup
              awslogs-stream-prefix: ecs

  PrivateService:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - PrivateLoadBalancerListener
    Properties: 
      ServiceName: !Sub ${applicationName}-${environmentName}-<service>
      Cluster: 
        Fn::ImportValue: !Sub ${clusterStack}-Cluster
      TaskDefinition: !Ref PrivateTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
            - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
          SecurityGroups:
            - Fn::ImportValue: !Sub ${clusterStack}-SecurityGroup
      LoadBalancers:
        - ContainerName: !Sub ${applicationName}-${environmentName}-<service>
          ContainerPort: !Ref port
          TargetGroupArn: !Ref PrivateTargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt PrivateDiscoveryService.Arn
          Port: !Ref port
      DeploymentController:
        Type: CODE_DEPLOY

  BackendDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: !Sub ${applicationName}-${environmentName}-<service>-discovery
      NamespaceId:
        Fn::ImportValue: !Sub ${clusterStack}-Namespace

Outputs:
  PrivateTargetGroup:
    Value: !GetAtt PrivateTargetGroup.TargetGroupName
    Description: Name of first private target group
    Export:
      Name: !Sub ${AWS::StackName}-PrivateTargetGroup
  PrivateTargetGroupAlt:
    # NOTE: only need if deployed through blue-green deployments
    Value: !GetAtt PrivateTargetGroupAlt.TargetGroupName
    Description: Name of second private target group
    Export:
      Name: !Sub ${AWS::StackName}-PrivateTargetGroupAlt
  PrivateServiceName:
    Value: !GetAtt PrivateService.Name
    Description: Name of the private service
    Export:
      Name: !Sub ${AWS::StackName}-PrivateServiceName
  PrivateServiceArn:
    Value: !Ref PrivateService
    Description: ARN of the backend service
    Export:
      Name: !Sub ${AWS::StackName}-PrivateServiceARN
  PrivateTaskDefinitionArn:
    Value: !Ref PrivateTaskDefinition
    Description: Arn of the backend task definition
    Export:
      Name: !Sub ${AWS::StackName}-PrivateTaskARN