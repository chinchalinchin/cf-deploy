AWSTemplateFormatVersion: "2010-09-09"

Description: 'Provisions resources for the frontend service deployed into applicationName-ClusterStack-environmentName. A task definition is created with a cross stack reference to the RepoStack frontend ECR image repository output. All the necessary resources to route traffic and initiate blue green deployments are provisioned, such as a load balancer, target groups, scaling policies. Finally, the service itself is created and a record is added to Route53 pointing to its load balancer. Note: the backend service needs stood up before the frontend service.'

Parameters:
  ## CROSS STACK REFERENCES
  iamStack:
    Type: String
    Default: Innolab-IAMStack
    Description: Name of the IAM Cross Stack reference
  vpcStack:
    Type: String
    Default: Innolab-VPCStack-Dev
    Description: Name of the VPC Cross Stack reference
  clusterStack:
    Type: String
    Default: Innolab-ClusterStack-Dev
    Description: Name of the Cluster Stack reference
  ## APPLICATION CONFIGURATION
  applicationName:
    Type: String
    Default: innolab
    Description: The name of the application being deployed.
  environmentName:
    Type: String
    Default: Dev
    Description: The environment into which the application is being deployed.
  ## SERVICE CONFIGURATION
  domainName:
    Type: String
    Default: makpar-innovation.net
    Description: Domain for the application cluster
  port:
    Type: Number
    Default: 8080 
    Description: Port mapping for service

Resources:
  AlationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${applicationName}/${environmentName}/alation/"

  AutoScalingAlationTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 3
      ResourceId: !Join ['/', [service, Fn::ImportValue: !Sub "${clusterStack}-Cluster", !GetAtt AlationService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: 
        Fn::ImportValue: !Sub "${iamStack}-ECSScalingRoleArn"

  AutoScalingAlationPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "service/${applicationName}-${environmentName}-cluster/${applicationName}-${environmentName}-alation"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingAlationTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 50

  AlationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-alation-target"
      Port: !Ref port
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  AlationTargetGroupAlt:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Sub "${applicationName}-${environmentName}-alation-target-2"
      Port: !Ref port
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"

  AlationLoadBalancerListenerCondition:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 1
      ListenerArn: 
        Fn::ImportValue: !Sub ${clusterStack}-PublicLoadBalancerListenerARN
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub "alation.${domainName}"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AlationTargetGroup

  AlationTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${applicationName}-${environmentName}-alation-task-definition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 4096
      Memory: 30720
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub "${iamStack}-ECSTaskExecutionRoleArn"
      ContainerDefinitions:
        - Name: !Sub ${applicationName}-${environmentName}-alation
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/innolab-alation:latest"
          PortMappings:
            - ContainerPort: !Ref port
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref AlationLogGroup
              awslogs-stream-prefix: ecs

  AlationService:
    Type: AWS::ECS::Service
    Properties: 
      ServiceName: !Sub ${applicationName}-${environmentName}-alation
      Cluster: 
        Fn::ImportValue: !Sub ${clusterStack}-Cluster
      TaskDefinition: !Ref AlationTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetA
            - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetB
          SecurityGroups:
            - Fn::ImportValue: !Sub ${clusterStack}-SecurityGroup
      LoadBalancers:
        - ContainerName: !Sub ${applicationName}-${environmentName}-alation
          ContainerPort: !Ref port
          TargetGroupArn: !Ref AlationTargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt AlationDiscoveryService.Arn
          Port: !Ref port
      DeploymentController:
        Type: CODE_DEPLOY

  AlationDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      Description: !Sub "Discovery service for the ${applicationName}-${environmentName}-alation service"
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: !Sub ${applicationName}-${environmentName}-alation-discovery
      NamespaceId: 
        Fn::ImportValue: !Sub ${clusterStack}-Namespace

Outputs:
  AlationTargetGroup:
    Value: !GetAtt AlationTargetGroup.TargetGroupName
    Description: Name of first alation target group
    Export:
      Name: !Sub ${AWS::StackName}-AlationTargetGroup
  AlationTargetGroupAlt:
    Value: !GetAtt AlationTargetGroupAlt.TargetGroupName
    Description: Name of second alation target group
    Export:
      Name: !Sub ${AWS::StackName}-AlationTargetGroupAlt
  AlationServiceName:
    Value: !GetAtt AlationService.Name
    Description: Name of the alation service
    Export: 
      Name: !Sub ${AWS::StackName}-AlationServiceName
  AlationServiceArn:
    Value: !Ref AlationService
    Description: Arn of the alation service
    Export: 
      Name: !Sub ${AWS::StackName}-AlationServiceARN
  AlationTaskDefinitionArn:
    Value: !Ref AlationTaskDefinition
    Description: Arn of the alation task definition
    Export:
      Name: !Sub ${AWS::StackName}-AlationTaskARN
        