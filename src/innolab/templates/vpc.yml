AWSTemplateFormatVersion: "2010-09-09"

Description: "Creates a VPC with private and public subnets, allocates CIDR blocks, configures route tables and security groups. In particular, a proxy is deployed into the public subnet that acts as a stand in for a NAT Gateway."

Parameters:
  applicationName:
    Type: String
    Default: innolab
    Description: Application tag appended to the resourced being provisioned and deployed
  hostedZoneId:
    Type: String
  domainName: 
    Type: String
    Default: makpar-innovation.net
    Description: Domain hosting the resources. Must be purchased before use.
  environmentName:
    Type: String
    Default: Dev
    Description: Name of the environment into which the VPC is being deployed.
  dbKeyName:
    Type: String
    Default: innolab_tunnel_Dev
    Description: Name of the EC2 keypair used for SSH'ing into Bastion Host EC2 instance.
  bastionHost:
    AllowedValues:
      - "true"
      - "false"
    Type: String
    Default: "true"
    Description: Flag to signal whether or not the Bastion Host should be provisioned. If false, a NAT Gateway will be provisioned and attached to VPC in its place.

Conditions:
  BastionHost: !Equals
    - !Ref bastionHost
    - "true"
  NotBastionHost: !Not
    - Condition: BastionHost

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Public0:
      CIDR: "10.0.0.0/24"
    Public1:
      CIDR: "10.0.1.0/24"
    Private0:
      CIDR: "10.0.2.0/24"
    Private1:
      CIDR: "10.0.3.0/24"
  AmazonLinuxAMI:
    us-east-1:
      AMI: ami-04681a1dbd79675a5    # N Virginia
    us-east-2:
      AMI: ami-0cf31d971a3ca20d6    # Ohio     
    us-west-1:
      AMI: ami-0782017a917e973e7    # N California
    us-west-2:
      AMI: ami-6cd6f714             # Oregon
    eu-west-1:
      AMI: ami-0bdb1d6c15a40392c    # Ireland
    eu-central-1:
      AMI: ami-0f5dbc86dd9cbf7a8    # Frankfurt
    sa-east-1:
      AMI: ami-0ad7b0031d41ed4b9    # Sao Paulo
    ap-southeast-1:
      AMI: ami-01da99628f381e50a    # Singapore
    ap-southeast-2:
      AMI: ami-00e17d1165b9dd3ec    # Sydney
    ap-northeast-1:
      AMI: ami-08847abae18baa040    # Tokyo
  AZRegions:
    ap-northeast-1:
      AZs: ["a", "b"]
    ap-northeast-2:
      AZs: ["a", "b"]
    ap-south-1:
      AZs: ["a", "b"]
    ap-southeast-1:
      AZs: ["a", "b"]
    ap-southeast-2:
      AZs: ["a", "b"]
    ca-central-1:
      AZs: ["a", "b"]
    eu-central-1:
      AZs: ["a", "b"]
    eu-west-1:
      AZs: ["a", "b"]
    eu-west-2:
      AZs: ["a", "b"]
    sa-east-1:
      AZs: ["a", "b"]
    us-east-1:
      AZs: ["a", "b"]
    us-east-2:
      AZs: ["a", "b"]
    us-west-1:
      AZs: ["a", "b"]
    us-west-2:
      AZs: ["a", "b"]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Application
        Value: !Ref applicationName 
      - Key: Environment
        Value: !Ref environmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list        
      Tags:
      - Key: Application
        Value: !Ref applicationName 
      - Key: Environment
        Value: !Ref environmentName

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Application
        Value: !Ref applicationName 
      - Key: Environment
        Value: !Ref environmentName

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      Tags:
      - Key: Application
        Value: !Ref applicationName 
      - Key: Environment
        Value: !Ref environmentName

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.60.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      Tags:
      - Key: Application
        Value: !Ref applicationName 
      - Key: Environment
        Value: !Ref environmentName

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Application
        Value: !Ref applicationName 
      - Key: Environment
        Value: !Ref environmentName

  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Application
        Value: !Ref applicationName 
      - Key: Environment
        Value: !Ref environmentName

  PrivateRoute1NATInstance:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Condition: BastionHost
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # If we are using a NAT Instance, route traffic through the NAT Instance:
      InstanceId:   !Ref NATInstance
  
  PrivateRoute1NATGateway:
    Type: AWS::EC2::Route
    Condition: NotBastionHost
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # Attach the public subnets to public route tables, 
  # and attach the private subnets to private route tables:    
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  RDSDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
        DBSubnetGroupDescription: "Subnet Group for database"
        DBSubnetGroupName: !Sub "${AWS::StackName}-database-subnet-group"
        SubnetIds: 
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
        Tags:
          - Key: Application
            Value: !Ref applicationName
          - Key: Environment
            Value: !Ref environmentName
    DependsOn:
      - PrivateSubnetA
      - PrivateSubnetB

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${applicationName}-${environmentName}-database-security-group
      GroupDescription: A security group for the lambdas to talk to the RDS
      VpcId: !Ref VPC
    DependsOn:
      - NATSecurityGroup

  OracleSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DatabaseSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt NATSecurityGroup.GroupId
      FromPort: 1521
      ToPort: 1521

  ElasticIPAddress:
   Type: AWS::EC2::EIP
   Condition: NotBastionHost
   Properties:
     Domain: VPC

  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: NotBastionHost
    Properties:
     AllocationId: !GetAtt ElasticIPAddress.AllocationId
     SubnetId: !Ref PublicSubnetA
     Tags:
      - Key: Application
        Value: !Ref applicationName
      - Key: Environment
        Value: !Ref environmentName

  # A security group for NATInstance.  Ingress from the VPC IPs only.  Egress is TCP & UDP only:
  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: BastionHost
    DependsOn: AttachGateway
    Properties:
      GroupName: !Sub ${applicationName}-${environmentName}-nat-security-group
      GroupDescription: Enable internal access to the NAT device
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        Description: VPC Self Ingress
        CidrIp: !GetAtt VPC.CidrBlock
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        Description: Allow all outgoing traffic
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '0'
        ToPort: '65535'
        Description: Allow all outgoing traffic
        CidrIp: 0.0.0.0/0

  # SECRET FOR PRIVATE KEY
  
  NATInstance:
    Type: AWS::EC2::Instance
    Condition: BastionHost
    DependsOn: PublicRoute1                                           # Must have route to IGW established.
    Properties:
      ImageId: !FindInMap [ AmazonLinuxAMI, !Ref "AWS::Region", AMI]  # We lookup the AMI from the Region Map
      InstanceType: t3.nano                                          # Any instance type is fine
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !Ref PublicSubnetA                                  # Any public subnet is fine
        AssociatePublicIpAddress: true                                # We will definitely need a public IP address
        GroupSet: [!Ref NATSecurityGroup]                             # Plug in the security group
      SourceDestCheck: false                                          # NATs don't work if EC2 tries the match source addresses with destinations.
      KeyName: !Ref dbKeyName
      Tags:
      - Key: Name
        Value: !Sub ${applicationName}-${environmentName}-bastion-host
      - Key: Application
        Value: !Ref applicationName
      - Key: Environment
        Value: !Ref environmentName
      UserData:      #  This code is NAT code.  Look at how the last line signals the wait condition:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install -y aws-cfn-bootstrap
          echo 1 > /proc/sys/net/ipv4/ip_forward
          echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
          /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
          /sbin/iptables-save > /etc/sysconfig/iptables
          mkdir -p /etc/sysctl.d/
          cat << NatConfFileMarker > /etc/sysctl.d/nat.conf
          net.ipv4.ip_forward = 1
          net.ipv4.conf.eth0.send_redirects = 0
          NatConfFileMarker
          /opt/aws/bin/cfn-signal -e 0 --resource NATInstance --stack ${AWS::StackName} --region ${AWS::Region}
    # This NATInstance is only complete when you get 1 signal back within 5 minutes'.
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    
  NATElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref NATInstance

  NATRoute53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref hostedZoneId
      RecordSets:
        - Name: !Sub "${applicationName}-bastion.${domainName}"
          Type: A
          ResourceRecords: 
            - !Ref NATElasticIP
          TTL: 900

Outputs:
  VPC:
    Description: VPC of the base network
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
  BastionHostIP:
    Description: Elastic IP of Bastion Host
    Value: !Ref NATElasticIP
    Export:
      Name: !Sub ${AWS::StackName}-BastionHostIP
  BastionHostDNSUrl:
    Description: IPv4 DNS public URL for bastion host
    Value: !GetAtt NATInstance.PublicDnsName
    Export:
      Name: !Sub ${AWS::StackName}-BastionHostURL
  PublicSubnetA:
    Description: First Public Subnet
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetA
  PublicSubnetB:
    Description: Second Public Subnet
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetB
  PrivateSubnetA:
    Description: First Private Subnet
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetA
  PrivateSubnetB:
    Description: Second Private Subnet
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetB
  DatabaseSecurityGroupId:
    Value: !Ref DatabaseSecurityGroup
    Export: 
      Name: !Sub ${AWS::StackName}-DatabaseSecurityGroup
  NatSecurityGroupId:
    Value: !Ref NATSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-NATSecurityGroup
  DatabaseSubnetGroup:
    Value: !Ref RDSDBSubnetGroup
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSubnetGroup
  VPCCIDRBlock:
    Value: !GetAtt VPC.CidrBlock
    Description: Internal CIDR IP range of the VPC
    Export:
      Name: !Sub ${AWS::StackName}-CidrBlock