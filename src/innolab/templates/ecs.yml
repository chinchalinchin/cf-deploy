AWSTemplateFormatVersion: "2010-09-09"

Description: 'Provisions resources for an ECS Fargate Cluster. A security group for container ingress for all containers deployed into the cluster is created, two load balancer for the private and public facing subnets of the cluster is provisioned, records are added to Route53 for the public facing services.'

Parameters:
  ## CROSS STACK REFERENCE CONFIGURATION
  vpcStack:
    Type: String
    Default: Innolab-VPCStack-Dev
    Description: Name of the VPC Cross Stack reference
  ## APPLICATION CONFIGURATION
  applicationName:
    Type: String
    Default: innolab
    Description: The name of the application being deployed.
  environmentName:
    Type: String
    Default: Dev
    Description: The environment into which the application is being deployed.
  ## DNS CONFIGURATION
  hostedZoneId:
    Type: String
    Description: Physical ID of the hosted zone where the domain is served.
  certificateId:
    Type: String
    Description: Physical ID of the ACM SSL certificate.
  domainName:
    Type: String
    Description: Domain the cluster services are hosted on
    Default: makpar-innovation.net

Mappings:
  BranchMap:
    Dev: 
      branch:  "dev"
      subdomain: "-dev"
    Test: 
      branch: "test"
      subdomain: "-test"
    Staging: 
      branch: "staging"
      subdomain: "-staging"
    Prod: 
      branch: "prod"
      subdomain: ""

Conditions:
  DevResources: !Equals
    - !Ref environmentName
    - Dev

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${applicationName}-${environmentName}-cluster"

  PrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
        Name: !Sub 
          - "${app}-${env}-ecs.net"
          - app: !Ref applicationName
            env: 
              Fn::FindInMap:
                - BranchMap
                - !Ref environmentName
                - branch
        Vpc: 
          Fn::ImportValue: !Sub "${vpcStack}-VPC"

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${applicationName}-${environmentName}-container-sg"
      GroupDescription: "Security group for ECS containers"
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"
  
  ContainerSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref ContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ContainerSecurityGroup

  PrivateLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "!${applicationName}-${environmentName}-private-alb-sg"
      GroupDescription: Access to the internal load balancer
      VpcId:
        Fn::ImportValue: !Sub ${vpcStack}-VPC

  PrivateLoadBalancerClusterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref ContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PrivateLoadBalancerSecurityGroup

  PrivateLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Name: !Sub "${applicationName}-${environmentName}-private-alb"
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # This load balancer is put into the private subnet, so that there is no
        # route for the public to even be able to access the private load balancer.
        - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetA
        - Fn::ImportValue: !Sub ${vpcStack}-PrivateSubnetB
      SecurityGroups: 
        - !Ref PrivateLoadBalancerSecurityGroup

  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${applicationName}-${environmentName}-public-alb-group"
      VpcId: 
        Fn::ImportValue: !Sub "${vpcStack}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  
  PublicLoadBalancerClusterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref ContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Sub "${applicationName}-${environmentName}-public-alb"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetA
        - Fn::ImportValue: !Sub ${vpcStack}-PublicSubnetB

  PublicLoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: ahoy there, matey
            StatusCode: 200
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${certificateId}"
    DependsOn:
      - PublicLoadBalancer

  FrontendRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref hostedZoneId
      Name: !Sub
        - "${subdomain}${subdomainEnv}.${domain}"
        - subdomain: !Ref applicationName
          domain: !Ref domainName
          subdomainEnv: 
            Fn::FindInMap:
              - BranchMap
              - !Ref environmentName
              - subdomain
      Type: A
      AliasTarget:
        DNSName: !GetAtt PublicLoadBalancer.DNSName
        HostedZoneId: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID

  SonarRecord:
    Type: AWS::Route53::RecordSet
    Condition: DevResources
    Properties:
      HostedZoneId: !Ref hostedZoneId
      Name: !Sub "${applicationName}-sonar.${domainName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt PublicLoadBalancer.DNSName
        HostedZoneId: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID

Outputs:
  ContainerSecurityGroup:
    Value: !Ref ContainerSecurityGroup
    Description: Security group for cluster containers
    Export:
      Name: !Sub ${AWS::StackName}-SecurityGroup
  NameSpace:
    Value: !Ref PrivateNamespace
    Description: Private DNS namespace for cluster
    Export:
      Name: !Sub ${AWS::StackName}-Namespace
  ClusterName:
    Value: !Ref Cluster
    Description: Name of Innovation Lab ECS Cluster
    Export:
      Name: !Sub ${AWS::StackName}-Cluster
  ClusterARN:
    Value: !GetAtt Cluster.Arn
    Description: Arn of the Innovation Lab ECS Cluster
    Export:
      Name: !Sub ${AWS::StackName}-ClusterARN
  PrivateLoadBalancerName:
    Value: !GetAtt PrivateLoadBalancer.LoadBalancerName
    Description: Name of private load balancer
    Export: 
      Name: !Sub ${AWS::StackName}-PrivateLoadBalancerName
  PrivateLoadBalancerArn:
    Value: !Ref PrivateLoadBalancer
    Description: ARN of private load balancer
    Export: 
      Name: !Sub ${AWS::StackName}-PrivateLoadBalancerARN
  PublicLoadBalancerName:
    Value: !GetAtt PublicLoadBalancer.LoadBalancerName
    Description: Name of public load balancer
    Export: 
      Name: !Sub ${AWS::StackName}-PublicLoadBalancerName
  PublicLoadBalancerArn:
    Value: !Ref PublicLoadBalancer
    Description: Name of public load balancer
    Export: 
      Name: !Sub ${AWS::StackName}-PublicLoadBalancerARN
  PublicLoadBalancerDNS:
    Value: !GetAtt PublicLoadBalancer.DNSName
    Description: DNS name of public load balancer
    Export:
      Name: !Sub ${AWS::StackName}-PublicLoadBalancerDNSName
  PublicLoadBalancerHostedZone:
    Value: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID
    Description: Load Balancer Hosted Zone Id
    Export:
      Name: !Sub ${AWS::StackName}-PublicLoadBalancerHostedZoneID
  PublicLoadBalancerListenerArn:
    Value: !Ref PublicLoadBalancerListenerHTTPS
    Description: ARN of the public load balancer listener
    Export:
      Name: !Sub ${AWS::StackName}-PublicLoadBalancerListenerARN