AWSTemplateFormatVersion: '2010-09-09'

Description: "The top of the DevOps stackset. This stack creates the CI/CD pipelines for the frontend and backend, hooks them into a CodeBuild project configured to use the Amazon Linux Standard 5.0 as a build environment. CloudWatch event rules are used to trigger the pipeline anytime a commit is made to the applicationName-frontend and -backend repositories on the environment branches: Dev, Staging, Prod."

Parameters:
  applicationName:
    Type: String
    Default: innolab
    Description: Tag appended to application resources
  environmentName:
    Type: String
    Default: Dev
    Description: Environment into which resources are being deployed
  domainName:
    Type: String
    Default: makpar-innovation.net
    Description: Domain name over which the appplication is served.
  iamStack:
    Type: String
    Default: Innolab-IAMStack
    Description: Cross-stack reference to stack containing IAM resources
  repoStack:
    Type: String
    Default: Innolab-RepoStack
    Description: Cross-stack reference to stack containing repository resources
  cognitoStack:
    Type: String
    Default: Innolab-CognitoStack
    Description: Cross-stack reference to stack containing Cognito resources
  docStack:
    Type: String
    Default: Innolab-DocStack
    Description: Cross-stack reference to stack containing coverage (documentation) resources

Conditions:
  DevResources: !Equals
    - !Ref environmentName
    - Dev

Mappings:
  BranchMap:
    Dev: 
      branch:  "dev"
    Test: 
      branch: "test"
    Staging: 
      branch: "staging"
    Prod: 
      branch: "prod"

Resources:
  PipelineArtifacts:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub 
        - "${app}-${env}-pipeline-artifacts"
        - app: !Ref applicationName
          env: 
            Fn::FindInMap:
              - BranchMap
              - !Ref environmentName
              - branch
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${applicationName}-${environmentName}-codebuild"
      Artifacts:
        Type: CODEPIPELINE
      ServiceRole:
        Fn::ImportValue: !Sub "${iamStack}-CodeBuildRoleArn"
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
      Cache:
        Type: LOCAL
        Modes: # You can specify one or more cache mode, 
          - LOCAL_CUSTOM_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE

  FrontendCodeDeploy:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: ECS
      ApplicationName: !Sub "${applicationName}-${environmentName}-frontend-code-deploy"

  # TODO: doesn't work!
  # FrontendDeploymentGroup:
  #   Type: AWS::CodeDeploy::DeploymentGroup
  #   Properties:
  #     ApplicationName: !Ref FrontendCodeDeploy
  #     ECSServices:
  #       - ClusterName: 
  #           Fn::ImportValue: !Sub "${ecsStack}-ClusterName"
  #         ServiceName:
  #           Fn::ImportValue: !Sub "${ecsStack}-FrontendServiceName"
  #     LoadBalancerInfo:
  #       ElbInfoList:
  #         - Name: 
  #             Fn::ImportValue: !Sub ${ecsStack}-FrontendLoadBalancerName
  #       TargetGroupInfoList:
  #         - Name:
  #             Fn::ImportValue: !Sub ${ecsStack}-FrontendTargetGroup
  #         - Name:
  #             Fn::ImportValue: !Sub ${ecsStack}-FrontendTargetGroupAlt
  #     DeploymentStyle:
  #       DeploymentOption: WITH_TRAFFIC_CONTROL
  #       DeploymentType: BLUE_GREEN
  #     ServiceRoleArn:
  #       Fn::ImportValue: !Sub ${iamStack}-CodeDeployRoleArn
  #     BlueGreenDeploymentConfiguration:
  #       DeploymentReadyOption: 
  #           ActionOnTimeout: CONTINUE_DEPLOYMENT
  #       TerminateBlueInstancesOnDeploymentSuccess: 
  #         Action: TERMINATE
  #         TerminationWaitTimeInMinutes: 2

  BackendCodeDeploy:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: ECS
      ApplicationName: !Sub "${applicationName}-${environmentName}-backend-code-deploy" 

  # TODO: doesn't work!
  # BackendDeploymentGroup:
  #   Type: AWS::CodeDeploy::DeploymentGroup
  #   Properties:
  #     ECSService:
  #       ClusterName: 
  #         Fn::ImportValue: !Sub "${ecsStack}-ClusterName"
  #       ServiceName:
  #         Fn::ImportValue: !Sub "${ecsStack}-BackendServiceName"
  #     LoadBalancerInfo:
  #       TargetGroupInfoList:
  #         - Name:
  #             Fn::ImportValue: !Sub ${ecsStack}-BackendTargetGroup
  #         - Name:
  #             Fn::ImportValue: !Sub ${ecsStack}-BackendTargetGroupAlt
  #     DeploymentStyle:
  #       DeploymentOption: WITH_TRAFFIC_CONTROL
  #       DeploymentType: BLUE_GREEN

  BackendCoverageReportGroup:
    Type: AWS::CodeBuild::ReportGroup
    Condition: DevResources
    Properties:
      ExportConfig:
        ExportConfigType: NO_EXPORT
      Name: !Sub ${applicationName}-backend-coverage-report-group
      Type: CODE_COVERAGE

  BackendTestReportGroup:
    Type: AWS::CodeBuild::ReportGroup
    Condition: DevResources
    Properties:
      ExportConfig:
        ExportConfigType: NO_EXPORT
      Name: !Sub ${applicationName}-backend-test-report-group
      Type: TEST
      
  FrontendCoverageReportGroup:
    Type: AWS::CodeBuild::ReportGroup
    Condition: DevResources
    Properties:
      ExportConfig:
        ExportConfigType: NO_EXPORT
      Name: !Sub ${applicationName}-frontend-coverage-report-group
      Type: CODE_COVERAGE

  FrontendTestReportGroup:
    Type: AWS::CodeBuild::ReportGroup
    Condition: DevResources
    Properties:
      ExportConfig:
        ExportConfigType: NO_EXPORT
      Name: !Sub ${applicationName}-frontend-test-report-group
      Type: TEST

  FrontendEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${applicationName}-${environmentName}-ecs-frontend-codecommit
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - Fn::ImportValue: !Sub "${repoStack}-FrontendRepositoryARN"
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref environmentName
      Targets:
        - Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${applicationName}-${environmentName}-frontend-build-pipeline"
          RoleArn: 
            Fn::ImportValue: !Sub "${iamStack}-CloudWatchEventRoleArn"
          Id: !Sub ${applicationName}-${environmentName}-codepipeline-frontend

  FrontendBuildPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${applicationName}-${environmentName}-frontend-build-pipeline"
      RoleArn:
        Fn::ImportValue: !Sub "${iamStack}-CodePipelineRoleArn"
      ArtifactStore: 
        Type: S3 
        Location: !Ref PipelineArtifacts
      Stages:
        - Name: Source
          Actions:
            # GITHUB CONNECTION SOURCE
            # - Name: Source
            #   InputArtifacts: []
            #   ActionTypeId:
            #     Category: Source
            #     Owner: AWS
            #     Version: 1
            #     Provider: CodeStarSourceConnection
            #   OutputArtifacts:
            #     - Name: !Sub "${applicationName}-${environmentName}-frontend-source"    
            #   Configuration:
            #     ConnectionArn:
            #       Fn::ImportValue: !Sub ${staticStack}-GitHubConnectionARN
            #     # THIS NEEDS UPDATED TO POINT TO THE CORRECT REPO
            #     FullRepositoryId: makpar-innovation-lab/react-template
            #     BranchName: !Ref environmentName
            #     OutputArtifactFormat: CODEBUILD_CLONE_REF
            #     DetectChanges: true
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: !Sub "${applicationName}-${environmentName}-frontend-source"    
              Configuration:
                RepositoryName: 
                  Fn::ImportValue: !Sub "${repoStack}-FrontendRepository"
                BranchName: !Ref environmentName
                PollForSourceChanges: false
        - Name: Build   
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: !Sub "${applicationName}-${environmentName}-frontend-source"
              OutputArtifacts:
                - Name: !Sub "${applicationName}-${environmentName}-frontend-build"
              Configuration: 
                ProjectName: !Ref CodeBuild
                EnvironmentVariables: !Sub 
                  - '[{"name":"BRANCH","value":"${env}","type":"PLAINTEXT"},{"name":"APPLICATION","value":"${app}","type":"PLAINTEXT"},{"name":"SONAR_URL","value":"${app}-sonarURL", "type":"SECRETS_MANAGER"}, {"name":"SONAR_TOKEN","value":"${app}-sonarToken","type":"SECRETS_MANAGER"},{"name": "API_USERNAME", "value": "${app}-APIUsername", "type":"SECRETS_MANAGER" }, {"name": "API_PASSWORD", "value": "${app}-APIPassword", "type": "SECRETS_MANAGER"},{"name": "DOMAIN", "value": "${domainName}", "type": "PLAINTEXT"}, {"name":"COVERAGE_DISTRIBUTION_ID", "value": "${covDistro}", "type": "PLAINTEXT"},{"name":"AWS_DEFAULT_REGION","value":"${AWS::Region}","type":"PLAINTEXT" }, { "name": "AWS_ACCOUNT_ID", "value": "${AWS::AccountId}", "type": "PLAINTEXT"}, {"name": "SNYK_ORG", "value": "innolab-snykOrg", "type": "SECRETS_MANAGER"}, {"name": "SNYK_TOKEN", "value": "innolab-snykToken", "type": "SECRETS_MANAGER"}]'
                  - env: 
                      Fn::FindInMap:
                        - BranchMap
                        - !Ref environmentName
                        - branch
                    app: !Ref applicationName
                    covDistro:
                      Fn::ImportValue: !Sub ${docStack}-WebsiteDistributionID

  # FrontendDeployPipeline:
  #   Type: AWS::CodePipeline::Pipeline
  #   Properties:
  #     Name: !Sub "${applicationName}-${environmentName}-frontend-deploy-pipeline"
  #     RoleArn:
  #       Fn::ImportValue: !Sub "${iamStack}-CodePipelineRoleArn"
  #     ArtifactStore: 
  #       Type: S3 
  #       Location: !Ref PipelineArtifacts
  #     Stages:
  #       - Name: Source
  #         Actions:
  #           - Name: TaskSource
  #             OutputArtifacts:
  #               - Name: !Sub "${applicationName}-${environmentName}-frontend-taskdef"
  #             ActionTypeId:
  #               Provider: S3
  #               Owner: AWS
  #               Version: '1'
  #               Category: Source
  #             Region: !Sub ${AWS::Region}
  #             Configuration:
  #               S3Bucket: 
  #                 Fn::ImportValue: !Sub ${repoStack}-TaskBucket
  #               S3ObjectKey: !Sub 
  #                 - 'frontend/taskdef.${env}.json'
  #                 - env: 
  #                     Fn::FindInMap:
  #                       - BranchMap
  #                       - !Ref environmentName
  #                       - branch
  #               PollForSourceChanges: 'false'
  #             InputArtifacts: []
  #           - Name: SpecSource
  #             OutputArtifacts:
  #               - Name: !Sub "${applicationName}-${environmentName}-frontend-appspec"
  #             ActionTypeId:
  #               Provider: S3
  #               Owner: AWS
  #               Version: '1'
  #               Category: Source
  #             Region: !Sub ${AWS::Region}
  #             Configuration:
  #               S3Bucket: 
  #                 Fn::ImportValue: !Sub ${repoStack}-TaskBucket
  #               S3ObjectKey: !Sub
  #                 - 'frontend/appspec.${env}.yml'
  #                 - env: 
  #                     Fn::FindInMap:
  #                       - BranchMap
  #                       - !Ref environmentName
  #                       - branch
  #               PollForSourceChanges: 'false'
  #             InputArtifacts: []
  #           - Name: Image
  #             InputArtifacts: []
  #             ActionTypeId:
  #               Category: Source
  #               Owner: AWS
  #               Version: 1
  #               Provider: ECR
  #             OutputArtifacts: 
  #               - Name: !Sub "${applicationName}-${environmentName}-frontend-image"
  #             Configuration:
  #               RepositoryName:
  #                 Fn::ImportValue: !Sub "${repoStack}-FrontendImageRepositoryName"
  #               ImageTag: !Ref environmentName
  #       - Name: Deploy
  #         Actions:
  #           - Name: Deploy
  #             ActionTypeId:
  #               Category: Deploy
  #               Owner: AWS
  #               Provider: CodeDeployToECS
  #               Version: '1'
  #             Configuration:
  #               AppSpecTemplateArtifact: !Sub "${applicationName}-${environmentName}-frontend-appspec" 
  #               ApplicationName: !Ref FrontendCodeDeploy
  #               Image1ArtifactName: !Sub "${applicationName}-${environmentName}-frontend-image"
  #               Image1ContainerName: IMAGE1_NAME
  #               TaskDefinitionTemplatePath: !Sub 
  #                 - 'frontend/taskdef.${env}.json'
  #                 - env: 
  #                     Fn::FindInMap:
  #                       - BranchMap
  #                       - !Ref environmentName
  #                       - branch
  #               AppSpecTemplatePath: !Sub 
  #                 - 'frontend/appspec.${env}.yml'
  #                 - env: 
  #                     Fn::FindInMap:
  #                       - BranchMap
  #                       - !Ref environmentName
  #                       - branch
  #               TaskDefinitionTemplateArtifact: !Sub "${applicationName}-${environmentName}-frontend-taskdef" 
  #             OutputArtifacts: []
  #             InputArtifacts:
  #               - Name: !Sub "${applicationName}-${environmentName}-frontend-source"   
  #               - Name: !Sub "${applicationName}-${environmentName}-frontend-image"
  #             Region: !Sub ${AWS::Region}
  #             Namespace: DeployVariables

  BackendEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${applicationName}-${environmentName}-ecs-backend-codecommit
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - Fn::ImportValue: !Sub "${repoStack}-BackendRepositoryARN"
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref environmentName
      Targets:
        - Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${applicationName}-${environmentName}-backend-build-pipeline"
          RoleArn: 
            Fn::ImportValue: !Sub "${iamStack}-CloudWatchEventRoleArn"
          Id: !Sub ${applicationName}-${environmentName}-codepipeline-backend

  BackendBuildPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${applicationName}-${environmentName}-backend-build-pipeline"
      RoleArn:
        Fn::ImportValue: !Sub "${iamStack}-CodePipelineRoleArn"
      ArtifactStore: 
        Type: S3 
        Location: !Ref PipelineArtifacts
      Stages:
        # GITHUB CONNECTION SOURCE
        # - Name: Source
        #   Actions:
        #     - Name: Source
        #       InputArtifacts: []
        #       ActionTypeId:
        #         Category: Source
        #         Owner: AWS
        #         Version: 1
        #         Provider: CodeStarSourceConnection
        #       OutputArtifacts:
        #         - Name: !Sub "${applicationName}-${environmentName}-backend-source"    
        #       Configuration:
        #         ConnectionArn:
        #           Fn::ImportValue: !Sub ${staticStack}-GitHubConnectionARN
        #         # THIS NEEDS UPDATED TO POINT TO THE CORRECT REPO
        #         FullRepositoryId: makpar-innovation-lab/spring-template
        #         BranchName: !Ref environmentName
        #         OutputArtifactFormat: CODEBUILD_CLONE_REF
        #         DetectChanges: true
        - Name: Source
          Actions:
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: !Sub "${applicationName}-${environmentName}-backend-source"    
              Configuration:
                RepositoryName: 
                  Fn::ImportValue: !Sub "${repoStack}-BackendRepository"
                BranchName: !Ref environmentName
                PollForSourceChanges: false
        # TODO: doesn't work!
        # - Name: Scan
          # Actions:
            # - Name: Scan
              # InputArtifacts:
                # - Name: !Sub "${applicationName}-${environmentName}-backend-source"
              # ActionTypeId:
                # Category: Invoke
                # Owner: ThirdParty
                # Version: 1
                # Provider: Snyk
              # OutputArtifacts:
                # - Name: !Sub "${applicationName}-${environmentName}-snyk-scan"  
                
                ## TODO: the configuration fro this Action isn't documented anywhere, but 
                ##      without these two properties, CloudFormation complains about not 
                ##      having them.
              # Configuration:
                # ClientId: <id>
                # ClientToken: <token>
        - Name: Build   
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: !Sub "${applicationName}-${environmentName}-backend-source"
              OutputArtifacts:
                - Name: !Sub "${applicationName}-${environmentName}-backend-dev-build"
              Configuration: 
                ProjectName: !Ref CodeBuild
                EnvironmentVariables: !Sub 
                  - '[{"name":"BRANCH","value":"${env}","type":"PLAINTEXT"},{"name":"APPLICATION","value":"${app}","type":"PLAINTEXT"},{"name":"AWS_DEFAULT_REGION","value":"${AWS::Region}","type":"PLAINTEXT" }, { "name": "AWS_ACCOUNT_ID", "value": "${AWS::AccountId}", "type": "PLAINTEXT"},{"name": "SONAR_URL", "value":"${app}-sonarURL", "type":"SECRETS_MANAGER" }, { "name": "SONAR_TOKEN", "value":"${app}-sonarToken", "type": "SECRETS_MANAGER" },{"name": "API_USERNAME", "value": "${app}-APIUsername", "type":"SECRETS_MANAGER" }, {"name": "API_PASSWORD", "value": "${app}-APIPassword", "type": "SECRETS_MANAGER"},{"name": "DOMAIN", "value": "${domainName}", "type": "PLAINTEXT"},{"name":"COVERAGE_DISTRIBUTION_ID", "value": "${covDistro}", "type": "PLAINTEXT"},{"name":"CLIENT_ID", "value":"${cognitoClient}", "type": "PLAINTEXT"},{"name":"POOL_ID", "value":"${userPool}", "type": "PLAINTEXT"}, {"name": "SNYK_ORG", "value": "innolab-snykOrg", "type": "SECRETS_MANAGER"}, {"name": "SNYK_TOKEN", "value": "innolab-snykToken", "type": "SECRETS_MANAGER"}]'
                  - env: 
                      Fn::FindInMap:
                        - BranchMap
                        - !Ref environmentName
                        - branch
                    app: !Ref applicationName
                    covDistro:
                      Fn::ImportValue: !Sub ${docStack}-WebsiteDistributionID
                    cognitoClient:
                      Fn::ImportValue: !Sub ${cognitoStack}-APIClientID
                    userPool:
                      Fn::ImportValue: !Sub ${cognitoStack}-UserPoolID

  # BackendDeployPipeline:
  #   Type: AWS::CodePipeline::Pipeline
  #   Properties:
  #     Name: !Sub "${applicationName}-${environmentName}-backend-deploy-pipeline"
  #     RoleArn:
  #       Fn::ImportValue: !Sub "${iamStack}-CodePipelineRoleArn"
  #     ArtifactStore: 
  #       Type: S3 
  #       Location: !Ref PipelineArtifacts
  #     Stages:
  #       - Name: Source
  #         Actions:
  #           - Name: TaskSource
  #             OutputArtifacts:
  #               - Name: !Sub "${applicationName}-${environmentName}-backend-taskdef"
  #             ActionTypeId:
  #               Provider: S3
  #               Owner: AWS
  #               Version: '1'
  #               Category: Source
  #             Region: !Sub ${AWS::Region}
  #             Configuration:
  #               S3Bucket: 
  #                 Fn::ImportValue: !Sub ${repoStack}-TaskBucket
  #               S3ObjectKey: !Sub
  #                 - 'backend/taskdef.${env}.json'
  #                 - env: 
  #                     Fn::FindInMap:
  #                       - BranchMap
  #                       - !Ref environmentName
  #                       - branch
  #               PollForSourceChanges: 'false'
  #             InputArtifacts: []
  #           - Name: Source
  #             OutputArtifacts:
  #               - Name: !Sub "${applicationName}-${environmentName}-backend-appspec"
  #             ActionTypeId:
  #               Provider: S3
  #               Owner: AWS
  #               Version: '1'
  #               Category: Source
  #             Region: !Sub ${AWS::Region}
  #             Configuration:
  #               S3Bucket: 
  #                 Fn::ImportValue: !Sub ${repoStack}-TaskBucket
  #               S3ObjectKey: !Sub
  #                 - 'backend/appspec.${env}.yml'
  #                 - env: 
  #                     Fn::FindInMap:
  #                       - BranchMap
  #                       - !Ref environmentName
  #                       - branch
  #               PollForSourceChanges: 'false'
  #             InputArtifacts: []
  #           - Name: Image
  #             InputArtifacts: []
  #             ActionTypeId:
  #               Category: Source
  #               Owner: AWS
  #               Version: 1
  #               Provider: ECR
  #             OutputArtifacts: 
  #               - Name: !Sub "${applicationName}-${environmentName}-backend-image"
  #             Configuration:
  #               RepositoryName:
  #                 Fn::ImportValue: !Sub "${repoStack}-BackendImageRepositoryName"
  #               ImageTag: !Ref environmentName
  #       - Name: Deploy
  #         Actions:
  #           - Name: Deploy
  #             ActionTypeId:
  #               Category: Deploy
  #               Owner: AWS
  #               Provider: CodeDeployToECS
  #               Version: '1'
  #             Configuration:
  #               AppSpecTemplateArtifact: !Sub "${applicationName}-${environmentName}-backend-appspec" 
  #               ApplicationName: !Ref BackendCodeDeploy
  #               Image1ArtifactName: !Sub "${applicationName}-${environmentName}-backend-image"
  #               Image1ContainerName: IMAGE1_NAME
  #               TaskDefinitionTemplatePath: !Sub 
  #                 - 'backend/taskdef.${env}.json'
  #                 - env: 
  #                     Fn::FindInMap:
  #                       - BranchMap
  #                       - !Ref environmentName
  #                       - branch
  #               AppSpecTemplatePath: !Sub 
  #                 - 'backend/appspec.${env}.yml'
  #                 - env: 
  #                     Fn::FindInMap:
  #                       - BranchMap
  #                       - !Ref environmentName
  #                       - branch
  #               TaskDefinitionTemplateArtifact: !Sub "${applicationName}-${environmentName}-backend-taskdef" 
  #             OutputArtifacts: []
  #             InputArtifacts:
  #               - Name: !Sub "${applicationName}-${environmentName}-backend-source"   
  #               - Name: !Sub "${applicationName}-${environmentName}-backend-image"
  #             Region: !Sub ${AWS::Region}
  #             Namespace: DeployVariables