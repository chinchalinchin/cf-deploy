AWSTemplateFormatVersion: '2010-09-09'

Description: "The top of the DevOps stackset. This stack creates the CI/CD pipelines for the applicationName lambda function, hooks them into a CodeBuild project configured to use the Amazon Linux Standard 5.0 as a build environment. CloudWatch event rules are used to trigger the pipeline anytime a commit is made to the applicationName-lambda repository on the environment branches: Dev, Staging, Prod. "

Parameters:
  applicationName:
    Type: String
    Default: innolab
    Description: Tag appended to application resources
  environmentName:
    Type: String
    Default: Dev
    Description: Environment into which resources are being deployed
  iamStack:
    Type: String
    Default: Innolab-IAMStack
    Description: Cross-stack reference to stack containing IAM resources
  repoStack:
    Type: String
    Default: Innolab-RepoStack
    Description: Cross-stack reference to stack containing repository resources

Conditions:
  DevResources: !Equals
    - !Ref environmentName
    - Dev

Mappings:
  BranchMap:
    Dev: 
      branch:  "dev"
      subdomain: "-dev"
    Test: 
      branch: "test"
      subdomin: "-test"
    Staging: 
      branch: "staging"
      subdomain: "-staging"
    Prod: 
      branch: "prod"
      subdomain: ""

Resources:
    PipelineArtifacts:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        BucketName: !Sub 
          - "${app}-${env}-lambda-pipeline-artifacts"
          - app: !Ref applicationName
            env: 
              Fn::FindInMap:
                - BranchMap
                - !Ref environmentName
                - branch
        PublicAccessBlockConfiguration:
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
          BlockPublicPolicy: true
          BlockPublicAcls: true
    
    CodeBuild:
      Type: AWS::CodeBuild::Project
      Properties:
        Name: !Sub "${applicationName}-${environmentName}-lambda-codebuild"
        Artifacts:
          Type: CODEPIPELINE
        ServiceRole:
          Fn::ImportValue: !Sub "${iamStack}-CodeBuildRoleArn"
        Environment:
          Type: LINUX_CONTAINER
          ComputeType: BUILD_GENERAL1_MEDIUM
          Image: aws/codebuild/standard:4.0
          PrivilegedMode: true
        Source:
          Type: CODEPIPELINE
        Cache:
          Type: LOCAL
          Modes: # You can specify one or more cache mode, 
            - LOCAL_CUSTOM_CACHE
            - LOCAL_DOCKER_LAYER_CACHE
            - LOCAL_SOURCE_CACHE
    
    LambdaCoverageReportGroup:
      Type: AWS::CodeBuild::ReportGroup
      Condition: DevResources
      Properties:
        ExportConfig:
          ExportConfigType: NO_EXPORT
        Name: !Sub ${applicationName}-lambda-coverage-report-group
        Type: CODE_COVERAGE
    
    LambdaTestReportGroup:
      Type: AWS::CodeBuild::ReportGroup
      Condition: DevResources
      Properties:
        ExportConfig:
          ExportConfigType: NO_EXPORT
        Name: !Sub ${applicationName}-lambda-test-report-group
        Type: TEST
      
    LambdaEventRule:
      Type: AWS::Events::Rule
      Properties:
        Name: !Sub ${applicationName}-${environmentName}-lambda-codecommit
        EventPattern:
          source:
            - aws.codecommit
          detail-type:
            - 'CodeCommit Repository State Change'
          resources:
            - Fn::ImportValue: !Sub "${repoStack}-LambdaRepositoryARN"
          detail:
            event:
              - referenceCreated
              - referenceUpdated
            referenceType:
              - branch
            referenceName:
              - !Ref environmentName
        Targets:
          - Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${applicationName}-${environmentName}-lambda-pipeline"
            RoleArn: 
              Fn::ImportValue: !Sub "${iamStack}-CloudWatchEventRoleArn"
            Id: !Sub ${applicationName}-${environmentName}-codepipeline-lambda

    LambdaPipeline:
      Type: AWS::CodePipeline::Pipeline
      Properties:
        Name: !Sub "${applicationName}-${environmentName}-lambda-pipeline"
        RoleArn:
          Fn::ImportValue: !Sub "${iamStack}-CodePipelineRoleArn"
        ArtifactStore: 
          Type: S3 
          Location: !Ref PipelineArtifacts
        Stages:
          - Name: Source
            Actions:
              - Name: Source
                InputArtifacts: []
                ActionTypeId:
                  Category: Source
                  Owner: AWS
                  Version: 1
                  Provider: CodeCommit
                OutputArtifacts:
                  - Name: !Sub "${applicationName}-${environmentName}-lambda-source"    
                Configuration:
                  RepositoryName: 
                    Fn::ImportValue: !Sub "${repoStack}-LambdaRepository"
                  BranchName: !Ref environmentName
                  PollForSourceChanges: false
          - Name: Build   
            Actions:
              - Name: CodeBuild
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: '1'
                InputArtifacts:
                  - Name: !Sub "${applicationName}-${environmentName}-lambda-source"
                OutputArtifacts:
                  - Name: !Sub "${applicationName}-${environmentName}-lambda-build"
                Configuration: 
                  ProjectName: !Ref CodeBuild
                  EnvironmentVariables: !Sub 
                    - '[{"name":"BRANCH","value":"${env}","type":"PLAINTEXT"},{"name":"APPLICATION","value":"${app}","type":"PLAINTEXT"},{"name":"AWS_DEFAULT_REGION","value":"${AWS::Region}","type":"PLAINTEXT" },{ "name": "AWS_ACCOUNT_ID", "value": "${AWS::AccountId}", "type": "PLAINTEXT"}]'
                    - env: !Ref environmentName
                      app: !Ref applicationName
