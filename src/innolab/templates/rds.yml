AWSTemplateFormatVersion: "2010-09-09"
Description: "Provisions a DB instances with credentials resolved from the SecretManager and deploys it into a private subnet of the applicationName-VPCStack-environmentName and adds a ingress rule to the appropriate security group"

Parameters:
  applicationName:
    Type: String
    Default: innoLab
    Description: Namespace of application resources
  environmentName:
    Type: String
    Default: Dev
    Description: Environment into which resources are deploying
  typeName:
    Type: String
    AllowedValues:
      - postgres
      - oracle
    Description: SQL Engine type of the relational database service
  iamStack:
    Type: String
    Default: Innolab-IAMStack
    Description: Cross-stack reference to applicationName-IAMStack
  vpcStack:
    Type: String
    Default: Innolab-VPCStack-Dev
    Description: Cross-stack reference to applicationName-VPCStack-environmentName

Mappings:
  # Engine specific configuration goes here
  ConfigMap:
    postgres: 
      engine:  postgres
      engineVersion: 14.1
      licenseModel: postgresql-license
      iamAuthentication: true
      port: 5432
    oracle: 
      engine: oracle-se2
      engineVersion: 12.1.0.2.v26
      licenseModel: license-included
      iamAuthentication: false
      port: 1521

Resources:
  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 10
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: !Sub ${applicationName}-${environmentName}-${typeName}-database
      EnableIAMDatabaseAuthentication: 
        Fn::FindInMap:
          - ConfigMap
          - !Ref typeName
          - iamAuthentication
      Engine: 
        Fn::FindInMap:
          - ConfigMap
          - !Ref typeName
          - engine
      EngineVersion:
        Fn::FindInMap:
          - ConfigMap
          - !Ref typeName
          - engineVersion
      LicenseModel:
        Fn::FindInMap:
          - ConfigMap
          - !Ref typeName
          - licenseModel
      MasterUsername: !Sub "{{resolve:secretsmanager:${applicationName}-${environmentName}-${typeName}-dbUsername:SecretString}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${applicationName}-${environmentName}-${typeName}-dbPassword:SecretString}}"
      MonitoringInterval: 60
      MultiAZ: false
      PubliclyAccessible: false
      StorageEncrypted: true
      StorageType: gp2
      DeletionProtection: false
      Port: 
        Fn::FindInMap:
          - ConfigMap
          - !Ref typeName
          - port
      DBSubnetGroupName: 
        Fn::ImportValue: !Sub ${vpcStack}-DatabaseSubnetGroup
      VPCSecurityGroups: 
        - Fn::ImportValue: !Sub ${vpcStack}-DatabaseSecurityGroup
      MaxAllocatedStorage: 20
      MonitoringRoleArn:
        Fn::ImportValue: !Sub ${iamStack}-RDSMonitorRoleARN
      Tags: 
        - Key: Environment
          Value: !Ref environmentName
        - Key: Application
          Value: !Ref applicationName
  
  DatabaseSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Fn::ImportValue: !Sub "${vpcStack}-DatabaseSecurityGroup"
      IpProtocol: tcp
      Description: !Sub "Bastion Host ${typeName} Ingress"
      SourceSecurityGroupId:
        Fn::ImportValue: !Sub "${vpcStack}-NATSecurityGroup"
      FromPort:
        Fn::FindInMap:
          - ConfigMap
          - !Ref typeName
          - port
      ToPort:
        Fn::FindInMap:
          - ConfigMap
          - !Ref typeName
          - port

Outputs:
  RDSEndpoint:
    Value: !GetAtt RDS.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-RDSEndpoint